/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Asset } from "../../asset/base/Asset";
import { ValidateNested, IsOptional, IsDate, IsString } from "class-validator";
import { Type } from "class-transformer";
import { Map } from "../../map/base/Map";
import { Session } from "../../session/base/Session";
import { Streamer } from "../../streamer/base/Streamer";
import { Team } from "../../team/base/Team";
@ObjectType()
class Tournament {
  @ApiProperty({
    required: false,
    type: () => [Asset],
  })
  @ValidateNested()
  @Type(() => Asset)
  @IsOptional()
  assets?: Array<Asset>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [Map],
  })
  @ValidateNested()
  @Type(() => Map)
  @IsOptional()
  maps?: Array<Map>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: () => [Session],
  })
  @ValidateNested()
  @Type(() => Session)
  @IsOptional()
  sessions?: Array<Session>;

  @ApiProperty({
    required: false,
    type: () => [Streamer],
  })
  @ValidateNested()
  @Type(() => Streamer)
  @IsOptional()
  streamers?: Array<Streamer>;

  @ApiProperty({
    required: false,
    type: () => [Team],
  })
  @ValidateNested()
  @Type(() => Team)
  @IsOptional()
  teams?: Array<Team>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}
export { Tournament };
