/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AssetCreateNestedManyWithoutTournamentsInput } from "./AssetCreateNestedManyWithoutTournamentsInput";
import { ValidateNested, IsOptional, IsString } from "class-validator";
import { Type } from "class-transformer";
import { MapCreateNestedManyWithoutTournamentsInput } from "./MapCreateNestedManyWithoutTournamentsInput";
import { SessionCreateNestedManyWithoutTournamentsInput } from "./SessionCreateNestedManyWithoutTournamentsInput";
import { StreamerCreateNestedManyWithoutTournamentsInput } from "./StreamerCreateNestedManyWithoutTournamentsInput";
import { TeamCreateNestedManyWithoutTournamentsInput } from "./TeamCreateNestedManyWithoutTournamentsInput";
@InputType()
class TournamentCreateInput {
  @ApiProperty({
    required: false,
    type: () => AssetCreateNestedManyWithoutTournamentsInput,
  })
  @ValidateNested()
  @Type(() => AssetCreateNestedManyWithoutTournamentsInput)
  @IsOptional()
  @Field(() => AssetCreateNestedManyWithoutTournamentsInput, {
    nullable: true,
  })
  assets?: AssetCreateNestedManyWithoutTournamentsInput;

  @ApiProperty({
    required: false,
    type: () => MapCreateNestedManyWithoutTournamentsInput,
  })
  @ValidateNested()
  @Type(() => MapCreateNestedManyWithoutTournamentsInput)
  @IsOptional()
  @Field(() => MapCreateNestedManyWithoutTournamentsInput, {
    nullable: true,
  })
  maps?: MapCreateNestedManyWithoutTournamentsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: false,
    type: () => SessionCreateNestedManyWithoutTournamentsInput,
  })
  @ValidateNested()
  @Type(() => SessionCreateNestedManyWithoutTournamentsInput)
  @IsOptional()
  @Field(() => SessionCreateNestedManyWithoutTournamentsInput, {
    nullable: true,
  })
  sessions?: SessionCreateNestedManyWithoutTournamentsInput;

  @ApiProperty({
    required: false,
    type: () => StreamerCreateNestedManyWithoutTournamentsInput,
  })
  @ValidateNested()
  @Type(() => StreamerCreateNestedManyWithoutTournamentsInput)
  @IsOptional()
  @Field(() => StreamerCreateNestedManyWithoutTournamentsInput, {
    nullable: true,
  })
  streamers?: StreamerCreateNestedManyWithoutTournamentsInput;

  @ApiProperty({
    required: false,
    type: () => TeamCreateNestedManyWithoutTournamentsInput,
  })
  @ValidateNested()
  @Type(() => TeamCreateNestedManyWithoutTournamentsInput)
  @IsOptional()
  @Field(() => TeamCreateNestedManyWithoutTournamentsInput, {
    nullable: true,
  })
  teams?: TeamCreateNestedManyWithoutTournamentsInput;
}
export { TournamentCreateInput };
