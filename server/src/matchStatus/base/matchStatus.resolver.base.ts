/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteMatchStatusArgs } from "./DeleteMatchStatusArgs";
import { MatchStatusFindManyArgs } from "./MatchStatusFindManyArgs";
import { MatchStatusFindUniqueArgs } from "./MatchStatusFindUniqueArgs";
import { MatchStatus } from "./MatchStatus";
import { MatchStatusService } from "../matchStatus.service";

@graphql.Resolver(() => MatchStatus)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MatchStatusResolverBase {
  constructor(
    protected readonly service: MatchStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MatchStatus",
    action: "read",
    possession: "any",
  })
  async _matchStatusesMeta(
    @graphql.Args() args: MatchStatusFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [MatchStatus])
  @nestAccessControl.UseRoles({
    resource: "MatchStatus",
    action: "read",
    possession: "any",
  })
  async matchStatuses(
    @graphql.Args() args: MatchStatusFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<MatchStatus[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "MatchStatus",
    });
    const results = await this.service.findMany(args);
    return results.map((result) => permission.filter(result));
  }

  @graphql.Query(() => MatchStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MatchStatus",
    action: "read",
    possession: "own",
  })
  async matchStatus(
    @graphql.Args() args: MatchStatusFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<MatchStatus | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "MatchStatus",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => MatchStatus)
  @nestAccessControl.UseRoles({
    resource: "MatchStatus",
    action: "delete",
    possession: "any",
  })
  async deleteMatchStatus(
    @graphql.Args() args: DeleteMatchStatusArgs
  ): Promise<MatchStatus | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
